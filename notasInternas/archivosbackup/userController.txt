// src/controllers/userController.ts
import { Request, Response } from "express";
import User from "../models/userModel"; // Import the IUser interface

export interface AuthenticatedUser {
  googleId: string;
  displayName: string;
  // Add other properties as needed
}

export const createUserFromOAuth = async (userData: AuthenticatedUser) => {
  try {
    // Extract relevant user data from the userData object
    const { googleId, displayName } = userData;

    // Check if the user already exists in the database based on Google ID
    const existingUser = await User.findOne({ googleId });

    if (existingUser) {
      // User already exists, return the existing user
      return existingUser;
    }

    // User does not exist, create a new user document
    const newUser = new User({
      googleId,
      displayName, // Use displayName directly
      // Add other fields as needed
    });

    // Save the new user to the database
    await newUser.save();

    // Return the newly created user
    return newUser;
  } catch (error) {
    console.error("Error creating user:", error);
    throw error; // Handle any errors as needed
  }
};

export const createUser = async (req: Request, res: Response) => {
  try {
    const { googleId } = req.session.user as AuthenticatedUser;

    const existingUser = await User.findOne({ googleId });

    if (existingUser) {
      res.status(200).json(existingUser);
    } else {
      const newUser = new User({
        googleId,
        displayName: req.session.user?.displayName,
      });

      await newUser.save();

      res.status(201).json(newUser);
    }
  } catch (error) {
    console.error("Error creating user:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

// Function to render the chat page
export const getChatPage = (req: Request, res: Response) => {
  console.log(`route http://localhost:8080/chat has been called`);
  res.status(200).json({
    message:
      "Router handling successfully http://localhost:8080/chat. This will display the chat.",
  });
};



viejas versiones

import { Request, Response } from "express";
import User from "../models/userModel";
import Message from "../models/messageModel"; // Import your message model

// Define a custom interface for req.user
export interface AuthenticatedUser {
  googleId: string;
  displayName: string;
  // Add other properties as needed
}

export const createUserFromOAuth = async (userData: any) => {
  try {
    // Extract relevant user data from the userData object
    const { googleId, displayName, email } = userData;

    // Check if the user already exists in the database based on Google ID or email
    const existingUser = await User.findOne({ $or: [{ googleId }, { email }] });

    if (existingUser) {
      // User already exists, return the existing user
      return existingUser;
    }

    // User does not exist, create a new user document
    const newUser = new User({
      googleId,
      name: displayName,
      email, // Add other fields as needed
    });

    // Save the new user to the database
    await newUser.save();

    // Return the newly created user
    return newUser;
  } catch (error) {
    console.error("Error creating user:", error);
    throw error; // Handle any errors as needed
  }
};

export const createUser = async (req: Request & { user: AuthenticatedUser }, res: Response) => {
  try {
    // Now TypeScript recognizes googleId and displayName on req.user
    const { googleId, displayName } = req.user;

    // Check if the user already exists in the database
    const existingUser = await User.findOne({ googleId });

    if (existingUser) {
      // User already exists, return the existing user
      res.status(200).json(existingUser);
    } else {
      // User does not exist, create a new user document
      const newUser = new User({
        googleId,
        name: displayName,
        // Add other fields as needed
      });

      // Save the new user to the database
      await newUser.save();

      // Return the newly created user
      res.status(201).json(newUser);
    }
  } catch (error) {
    console.error("Error creating user:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};





// Function to render the chat page
export const getChatPage = (req: Request, res: Response) => {

    console.log(`route http://localhost:8080/chat has been called`);
    res.status(200).json({
        message:
          "Router handling successfully http://localhost:8080/chat. this will display the chat.",
      });
};

// Function to get messages (protected route)
export const getMessages = async (req: Request, res: Response) => {
  try {
    // Retrieve messages from your database (MongoDB) using your Message model
    const messages = await Message.find().sort({ date: -1 }); // Sort by date in descending order
    res.json(messages);
  } catch (error) {
    console.error("Error fetching messages:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

// Function to send a message (protected route)
export const sendMessage = async (req: Request, res: Response) => {
  try {
    const { text, user } = req.body;

    // Create a new message using your Message model
    const message = new Message({ text, user });

    // Save the message to your database
    await message.save();

    // Send a success response
    res.status(201).json(message);
  } catch (error) {
    console.error("Error sending message:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};
