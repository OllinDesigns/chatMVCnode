import { Request, Response } from "express";
import Message from "../models/messageModel";
import mongoose from "mongoose";
import { IUser } from "../models/userModel";
import { io } from "../app";

export const sendMessage = async (req: Request, res: Response) => {
  console.log("sendMessage function is called");
  try {
    const recipientUserId = req.params.userId;
    const { text, author } = req.body; // Include 'author' in the destructuring
    const user = req.user as IUser | undefined; // Use IUser and allow undefined

    // Create a new message
    const newMessage = new Message({
      recipientUser: recipientUserId, // Use the recipientUserId from the route
      author: user ? user._id : new mongoose.Types.ObjectId(author), // Allow using authenticated user if available
      text,
    });

    console.log("New message:", newMessage);

    await newMessage.save();

    io.emit("new-message", newMessage);

    return res.status(201).json(newMessage);
  } catch (error) {
    console.error("Error sending a message:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
};


export const getMessages = async (req: Request, res: Response) => {
  try {
    // Retrieve all messages from the database
    const messages = await Message.find();

    return res.status(200).json(messages);
  } catch (error) {
    console.error("Error getting messages:", error);
    return res.status(500).json({ error: "Internal server error" });
  }
};