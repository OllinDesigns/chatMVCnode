af3722f2303e79a5acf3103c9ac4d4bb
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChatPage = exports.getAllUsers = exports.findUserByGoogleId = exports.createUserFromOAuth = void 0;
const userModel_1 = __importDefault(require("../models/userModel")); // Import the IUser interface
const createUserFromOAuth = (userData) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // Extract relevant user data from the userData object
        const { googleId, displayName } = userData;
        // Check if the user already exists in the database based on Google ID
        const existingUser = yield userModel_1.default.findOne({ googleId });
        if (existingUser) {
            // User already exists, return the existing user
            return existingUser;
        }
        // User does not exist, create a new user document
        const newUser = new userModel_1.default({
            googleId,
            displayName, // Use displayName directly
            // Add other fields as needed
        });
        // Save the new user to the database
        yield newUser.save();
        console.log(`function createUserFromOAuth from userController is being used`);
        // Return the newly created user
        return newUser;
    }
    catch (error) {
        console.error("Error creating user:", error);
        throw error; // Handle any errors as needed
    }
});
exports.createUserFromOAuth = createUserFromOAuth;
const findUserByGoogleId = (googleId) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return yield userModel_1.default.findOne({ googleId });
    }
    catch (error) {
        console.error("Error finding user by Google ID:", error);
        throw error;
    }
});
exports.findUserByGoogleId = findUserByGoogleId;
const getAllUsers = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // Retrieve all users from the database
        const users = yield userModel_1.default.find();
        // Respond with the list of users
        return res.status(200).json(users);
    }
    catch (error) {
        console.error("Error getting users:", error);
        return res.status(500).json({ error: "Internal server error" });
    }
});
exports.getAllUsers = getAllUsers;
// Function to render the chat page
const getChatPage = (req, res) => {
    console.log(`route http://localhost:8080/chat has been called`);
    res.status(200).json({
        message: "Router handling successfully http://localhost:8080/chat. This will display the chat.",
    });
};
exports.getChatPage = getChatPage;
