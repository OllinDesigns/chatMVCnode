[["/home/user/Documents/NODE/chatMVCnode/src/__tests__/controllers/getAllUsers.test.ts",{"fileContent":"import { getAllUsers } from '../../controllers/userController'\nimport {Request, Response} from 'express'\n\n    // should retrieve all users from the database and return a 200 status code with the list of users\n    it('should retrieve all users from the database and return a 200 status code with the list of users', async () => {\n        const req = {} as Request;\n        const res = {\n          status: jest.fn().mockReturnThis(),\n          json: jest.fn()\n        } as unknown as Response;\n  \n        await getAllUsers(req, res);\n  \n        expect(res.status).toHaveBeenCalledWith(200);\n      });","resolvedModuleNames":["/home/user/Documents/NODE/chatMVCnode/src/controllers/userController.ts","/home/user/Documents/NODE/chatMVCnode/src/models/userModel.ts"]}],["/home/user/Documents/NODE/chatMVCnode/src/controllers/userController.ts",{"fileContent":"// src/controllers/userController.ts\nimport { Request, Response } from \"express\";\nimport User from \"../models/userModel\"; // Import the IUser interface\n\nexport interface AuthenticatedUser {\n  googleId: string;\n  displayName: string;\n  // Add other properties as needed\n}\n\nexport const createUserFromOAuth = async (userData: AuthenticatedUser) => {\n  try {\n    // Extract relevant user data from the userData object\n    const { googleId, displayName } = userData;\n\n    // Check if the user already exists in the database based on Google ID\n    const existingUser = await User.findOne({ googleId });\n\n    if (existingUser) {\n      // User already exists, return the existing user\n      return existingUser;\n    }\n\n    // User does not exist, create a new user document\n    const newUser = new User({\n      googleId,\n      displayName, // Use displayName directly\n      // Add other fields as needed\n    });\n\n    // Save the new user to the database\n    await newUser.save();\n\n    console.log(\n      `function createUserFromOAuth from userController is being used`\n    );\n\n    // Return the newly created user\n    return newUser;\n  } catch (error) {\n    console.error(\"Error creating user:\", error);\n    throw error; // Handle any errors as needed\n  }\n};\n\nexport const findUserByGoogleId = async (googleId: string) => {\n  try {\n    return await User.findOne({ googleId });\n  } catch (error) {\n    console.error(\"Error finding user by Google ID:\", error);\n    throw error;\n  }\n};\n\nexport const getAllUsers = async (req: Request, res: Response) => {\n  try {\n    // Retrieve all users from the database\n    const users = await User.find();\n\n    // Respond with the list of users\n    return res.status(200).json(users);\n  } catch (error) {\n    console.error(\"Error getting users:\", error);\n    return res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\n\n// Function to render the chat page\nexport const getChatPage = (req: Request, res: Response) => {\n  console.log(`route http://localhost:8080/chat has been called`);\n  res.status(200).json({\n    message:\n      \"Router handling successfully http://localhost:8080/chat. This will display the chat.\",\n  });\n};\n\n","resolvedModuleNames":["/home/user/Documents/NODE/chatMVCnode/src/models/userModel.ts"]}],["/home/user/Documents/NODE/chatMVCnode/src/models/userModel.ts",{"fileContent":"\nimport mongoose, { Schema, Document } from \"mongoose\";\n\nexport interface IUser extends Document {\n  googleId: string;\n  displayName: string;\n  messages: mongoose.Types.ObjectId[]; // Add a reference to messages\n  author?: mongoose.Types.ObjectId; // Add an optional author field\n}\n\nconst userSchema: Schema = new Schema({\n  googleId: { type: String, required: true },\n  displayName: { type: String, required: true },\n  messages: [{ type: mongoose.Types.ObjectId, ref: \"Message\" }], // Reference to Message model\n});\n\nexport default mongoose.model<IUser>(\"User\", userSchema);\n\n\n\n\n\n// esta es la actual. cuidado con ella\n// import mongoose, { Schema, Document } from \"mongoose\";\n\n// export interface IUser extends Document {\n//   googleId: string;\n//   displayName: string;\n//   messages: mongoose.Types.ObjectId[]; // Add a reference to messages\n// }\n\n// const userSchema: Schema = new Schema({\n//   googleId: { type: String, required: true },\n//   displayName: { type: String, required: true },\n//   messages: [{ type: mongoose.Types.ObjectId, ref: \"Message\" }], // Reference to Message model\n// });\n\n// export default mongoose.model<IUser>(\"User\", userSchema);\n\n\n\n// import mongoose, { Schema, Document } from \"mongoose\";\n\n// export interface IUser extends Document {\n//   googleId: string;\n//   displayName: string;\n// }\n\n// const userSchema: Schema = new Schema({\n//   googleId: { type: String, required: true },\n//   displayName: { type: String, required: true },\n// });\n\n// export default mongoose.model<IUser>(\"User\", userSchema);\n","resolvedModuleNames":[]}]]